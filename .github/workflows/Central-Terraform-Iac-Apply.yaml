name: Central Terraform Apply Pipeline

on:
  repository_dispatch:
    types: [pr_apply]
  workflow_dispatch:

permissions:
  contents: write
  id-token: write
  pull-requests: read

jobs:
  who-triggered-me:
    runs-on: ubuntu-latest
    steps:
      - name: Who triggered me?
        run: |
          echo "### This pipeline trigger summary " >> $GITHUB_STEP_SUMMARY
          echo "I was triggered by ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            echo "Triggered by: ${{ github.event.client_payload.triggered_by }}" >> $GITHUB_STEP_SUMMARY
            echo 'Repository Dispatch payload:' >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY

            jq -n \
              --arg branch "${{ github.event.client_payload.branch }}" \
              --arg commit_sha "${{ github.event.client_payload.commit_sha }}" \
              --arg pr_apply "${{ github.event.client_payload.pr_apply }}" \
              --arg pr_number "${{ github.event.client_payload.pr_number }}" \
              --arg triggered_by "${{ github.event.client_payload.triggered_by }}" \
              '{
                branch: $branch,
                commit_sha: $commit_sha,
                pr_apply: $pr_apply,
                pr_number: $pr_number,
                triggered_by: $triggered_by
              }' >> $GITHUB_STEP_SUMMARY

            echo '```' >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Manual trigger" >> $GITHUB_STEP_SUMMARY
          fi

  terraform-format:
    name: Terraform Format
    runs-on: ubuntu-latest
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: "${{ github.event.client_payload.triggered_by }}"
          ref: "${{ github.event.client_payload.branch }}"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init 

      - name: Terraform Format
        run: terraform fmt -check -recursive

  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: "${{ github.event.client_payload.triggered_by }}"
          ref: "${{ github.event.client_payload.branch }}"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init 

      - name: Terraform Validate
        run: terraform validate

  terraform-tfsec:
    name: Terraform TfSec Scanning
    runs-on: ubuntu-latest
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      AAD_CLIENT_SECRET: ${{ secrets.AAD_CLIENT_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: "${{ github.event.client_payload.triggered_by }}"
          ref: "${{ github.event.client_payload.branch }}"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init 

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0

  terraform-checkov:
    name: Terraform Checkov Scanning
    runs-on: ubuntu-latest
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      AAD_CLIENT_SECRET: ${{ secrets.AAD_CLIENT_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: "${{ github.event.client_payload.triggered_by }}"
          ref: "${{ github.event.client_payload.branch }}"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init 

  compliance:
    name: Terraform Compliance
    runs-on: ubuntu-latest
    needs: [terraform-format, terraform-validate, terraform-tfsec, terraform-checkov]
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      AAD_CLIENT_SECRET: ${{ secrets.AAD_CLIENT_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: "${{ github.event.client_payload.triggered_by }}"
          ref: "${{ github.event.client_payload.branch }}"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init

      - name: Download plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: .

      - name: Convert to JSON
        run: terraform show -json pr-plan.out > tfplan.json

      - name: Install terraform-compliance
        run: pip install terraform-compliance

      # - name: Run terraform-compliance
      #   run: terraform-compliance -p tfplan.json -f features/

  terratest:
    name: Terratest
    runs-on: ubuntu-latest
    needs: [terraform-format, terraform-validate, terraform-tfsec, terraform-checkov]
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      AAD_CLIENT_SECRET: ${{ secrets.AAD_CLIENT_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: "${{ github.event.client_payload.triggered_by }}"
          ref: "${{ github.event.client_payload.branch }}"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      # - name: Run Terratest
      #   run: |
      #     cd terratest
      #     go mod tidy
      #     go test -v -tags="azure azureslim network" -timeout 30m
      #   env:
      #     ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    environment: production
    needs: [terraform-format, terraform-validate, terraform-tfsec, terraform-checkov, compliance, terratest]
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      AAD_CLIENT_SECRET: ${{ secrets.AAD_CLIENT_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: "${{ github.event.client_payload.triggered_by }}"
          ref: "${{ github.event.client_payload.branch }}"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Terraform Init
        run: terraform init

      - name: Download Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: .

      - name: Terraform Apply
        run: terraform apply -auto-approve pr-plan.out
